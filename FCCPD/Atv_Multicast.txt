import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class MulticastChat {
    private static final String MULTICAST_ADDRESS = "224.0.0.1";
    private static final int PORT = 5000;

    public static void main(String[] args) {
        try {
            InetAddress group = InetAddress.getByName(MULTICAST_ADDRESS);
            MulticastSocket socket = new MulticastSocket(PORT);
            socket.joinGroup(group);

            Thread receiverThread = new Thread(new MessageReceiver(socket));
            receiverThread.start();

            Scanner scanner = new Scanner(System.in);
            System.out.println("Escolha a opção de tópico (1/2/3):");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            System.out.println("Informe seu nome de usuário:");
            String username = scanner.nextLine();

            if (option == 1) {
                subscribeToTopic(socket, group, username, "Avisos Gerais");
            } else if (option == 2) {
                subscribeToTopic(socket, group, username, "Atividades Extracurriculares");
            } else if (option == 3) {
                Thread t1 = new Thread(() -> subscribeToTopic(socket, group, username, "Avisos Gerais"));
                Thread t2 = new Thread(() -> subscribeToTopic(socket, group, username, "Atividades Extracurriculares"));
                t1.start();
                t2.start();
            } else {
                System.out.println("Opção inválida.");
            }

            while (true) {
                System.out.println("Digite sua mensagem:");
                String message = scanner.nextLine();
                sendMessage(socket, group, username, option, message);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void subscribeToTopic(MulticastSocket socket, InetAddress group, String username, String topic) {
        try {
            String subscriptionMessage = "subscribe:" + topic + ":" + username;
            DatagramPacket subscriptionPacket = new DatagramPacket(subscriptionMessage.getBytes(), subscriptionMessage.length(), group, PORT);
            socket.send(subscriptionPacket);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void sendMessage(MulticastSocket socket, InetAddress group, String username, int option, String message) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy - HH:mm");
            String timestamp = dateFormat.format(new Date());
            String topic = (option == 1) ? "Avisos Gerais" : "Atividades Extracurriculares";
            String formattedMessage = "[" + timestamp + "] " + topic + " : " + message;
            DatagramPacket packet = new DatagramPacket(formattedMessage.getBytes(), formattedMessage.length(), group, PORT);
            socket.send(packet);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class MessageReceiver implements Runnable {
    private MulticastSocket socket;

    public MessageReceiver(MulticastSocket socket) {
        this.socket = socket;
    }

    @Override
    public void run() {
        try {
            while (true) {
                byte[] buffer = new byte[1024];
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);
                String receivedMessage = new String(packet.getData(), 0, packet.getLength());
                System.out.println(receivedMessage);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}