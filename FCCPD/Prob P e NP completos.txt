-A complexidade de um problema computacional √© o consumo de tempo
do melhor algoritmo poss√≠vel para o problema.

Classifica√ß√£o dos problemas com base na complexidade:

Problemas f√°ceis(polinomiais){
    Um algoritmo que resolve um dado problema √© polinomial se
    o seu consumo de tempo no pior caso √© limitado por um
    polin√¥mio no tamanho das inst√¢ncias do problema.

    EX: Problema de fatora√ß√£o: o tamanho da inst√¢ncia √© o n√∫mero
    de digitos de N(cerca de log n)

    EX2: Problema de ordena√ß√£o de elementos:O objetivo √© ordenar uma lista de 
    ùëõ n√∫meros em ordem crescente ou decrescente.

    O algoritmo √© polinomial se existe um n√∫mero i(o mesmo
    para todas as inst√¢ncias, tal que o consumo de tempo do
    algoritmo seja O(n^i))
}

Problemas dif√≠ceis(NP e NP-completos){
    Problemas de decis√£o em que √© poss√≠vel verificar a validade da solu√ß√£o em
    tempo polinomial.
    NP= Nondeterministic polynomial time

    EX de problemas NP: Soma de subconjuntos e satisfatibilidade booleana(SAT)

    NP Completos{
        Classe de problemas NP mas s√£o os mais dif√≠ceis da classe.

        Est√£o em NP - solu√ß√£o pode ser verificada em tempo polinomial

        S√£o NP-dif√≠ceis - qualquer problema em NP pode ser transformado nesse
        problema em tempo polinomial

        EX: Caixeiro Viajante, caminho Euleriano e o problema da mochila(knapsack)
    }
    Problemas NP s√£o problemas para os quais a solu√ß√£o pode ser 
    verificada em tempo polinomial, mas n√£o necessariamente sabemos 
    se podem ser resolvidos em tempo polinomial.

    Problemas NP-Completo s√£o aqueles que s√£o os mais dif√≠ceis dentro da classe NP
    pois resolver qualquer um deles em tempo polinomial significaria resolver
    todos os problemas em NP em tempo polinomial.
}